#!/bin/bash
# Menu to maintain and build AOKP.
# Written by tristan202. Feel free to use, modify and distribute the script.
# Just remember to give proper credit
#
# tristan202 [ad] gmail.com

me=`basename $0`

# Colorize and add text parameters
txtbld=$(tput bold)             # Bold
bldred=${txtbld}$(tput setaf 1) #  red
bldgrn=${txtbld}$(tput setaf 2) #  green
bldblu=${txtbld}$(tput setaf 4) #  blue
txtrst=$(tput sgr0)             # Reset

DEVICE=$1
TRISTAN202=$HOME/android/tristan202
AOKP=$HOME/android/aokp/kitkat
OUT=$AOKP/out/target/product/$DEVICE

if [ "$#" == "0" ]; then
  echo ""
  echo "Usage: $me {Model name, i.e. yuga|maguro}"
  exit 1
fi

guake -r "AOKP kitkat"
numlockx on

Output() {
  echo "$(date -d "1970-01-01 UTC $2 seconds") - $1 $OPERATION""ing $3"
}

Duration() {
  local S=$(echo $FINISH_TIME $BEGIN_TIME | awk '{print$1-$2}')
  ((h=S/3600))
  ((m=S%3600/60))
  ((s=S%60))
  printf "${bldgrn}$OPERATION""ing took: %dh:%dm:%ds\n${txtrst}" $h $m $s
}

Begin() {
  BEGIN_TIME=$(date +%s)
  Output Begin $BEGIN_TIME "$1"
}

Finish() {
  FINISH_TIME=$(date +%s)
  Output Finished $FINISH_TIME "$1"
  Duration
}

Init_Repo ()
{
  clear
  if [ ! -d $HOME/android/aokp ]; then
     mkdir $HOME/android/aokp
  fi
  if [ ! -f $AOKP/.repo/manifest.xml ]; then
    echo ""
    echo "${bldblu}Setting up AOKP repo...${txtrst}"
    mkdir $AOKP
  fi
  if [ ! -d ~/bin ]; then
    mkdir ~/bin
    PATH=~/bin:$PATH
    curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
  fi
  if [ ! -f ~/bin/repo ]; then
    curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
    chmod a+x ~/bin/repo
  fi
  cd $AOKP && repo init -u https://github.com/AOKP/platform_manifest.git -b kitkat -g all,kernel,device,vendor
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Start_Sync ()
{
  clear
  if [ -d $AOKP ]; then
    echo ""
    OPERATION="Sync"
    echo ""
    echo "${bldblu}Syncing repo...${txtrst}"
    Begin
    echo ""
    cd $AOKP && repo sync
    echo ""
    Finish
  else
    echo ""
    echo "${bldred}Directory does not exist. Check your 'AOKP' variable in line 5.${txtrst}"
    echo ""
    exit 0
  fi
  Sync_End
}

Sync_End ()
{
  echo ""
  echo "${bldblu}Got any cherries to pick?${txtrst}"
  echo ""
  echo -n "Press [${bldred}Y${txtrst}] if you do, or [${bldred}N${txtrst}] to return to main menu."
  echo ""
  read -n1 char
  case "$char" in
    [Nn]) Main ;;
    [Yy])  Pick_Cherries ;;
    *)   clear && echo "" && Sync_End ;;
  esac
}

Start_Build ()
{
  clear
  OPERATION="Build"
  files=$(ls $OUT/*.zip* 2> /dev/null | wc -l)
  if [ "$files" != "0" ]; then
    echo "Previous builds detected in 'out' folder. Delete them now?"
    echo ""
    echo -n "Press [${bldred}Y${txtrst}] to delete them, or [${bldred}N${txtrst}] to start build without deleting them."
    echo ""
    read -n1 char
    case "$char" in
      [Nn]) Build ;;
      [Yy])  rm $OUT/*.zip* ;;
      *) Start_Build ;;
    esac
  fi
  Build
}

Build ()
{
  clear
  echo ""
  echo "${bldblu}Good, starting build...${txtrst}"
  Begin
  cd $AOKP
  rm -rf out/target/product/$DEVICE/system/build.prop
  #export USE_CCACHE=1
  #export CCACHE_DIR=$TRISTAN202/.ccache
  #prebuilts/misc/linux-x86/ccache/ccache -M 20G
  wait
  echo ""
  echo "${bldblu}Setting up environment${txtrst}"
  echo ""
  . build/envsetup.sh
  wait
  echo ""
  echo "${bldblu}Brunching device${txtrst}"
  echo ""
  brunch $DEVICE -j2
  Finish
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Reboot_Bootloader ()
{
  clear
  echo ""
  echo "${bldblu}Rebooting to bootloader. Happy flashing.${txtrst}"
  adb reboot bootloader
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Start_Clobber ()
{
  clear
  echo ""
  echo "${bldblu}Cleaning build directory...${txtrst}"
  OPERATION="Clean"
  Begin
  cd $AOKP
  make clobber
  Finish
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Pick_Cherries ()
{
  clear
  echo ""
  echo "${bldblu}Picking cherries...${txtrst}"
  OPERATION="Cherrypick"
  tput cnorm
  echo ""
  echo "Copy/paste the project folder, i.e. 'frameworks/base'"
  echo -n ">" && read folder
  echo ""
  echo "Now paste the cherry-pick git link, i.e. 'git fetch <someproject> refs/changes/... && git cherry-pick FETCH_HEAD'"
  echo -n ">" && read cherry
  clear
  echo ""
  Begin
  cd $AOKP/$folder
  CHERRY=${cherry%%??????????????????????????????}
  $CHERRY && git cherry-pick FETCH_HEAD
  Finish
  echo ""
  echo "Got any more cherries to pick?"
  echo ""
  echo -n "Press [${bldred}Y${txtrst}] if you do, or [${bldred}N${txtrst}] to return to main menu."
  echo ""
  read -n1 char
  case "$char" in
    [Nn]) Main ;;
    [Yy])  Pick_Cherries ;;
    *)   Pick_Cherries ;;
  esac
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Start_Push ()
{
  NOW=$(date +%b-%d-%Y)
  clear
  echo "If you haven't done so already, connect your phone to usb now."
  read -p "${bldblu}Press [Enter] to continue...${txtrst}"
  echo ""
  if pidof -x adb > /dev/null
  then
    echo "ADB server already running, proceeding."
    sleep 2
  else
    adb start-server
  fi
  DEVICES=$(adb get-state)
  if [ $DEVICES == "device" ]; then
    FILE=$(find $OUT -type f -name "aokp_*_unofficial_*.zip" -printf %f)
    for zip in $FILE
    do
      OPERATION="Push"
      Begin
      echo ""
      echo "Pushing '$zip' to /sdcard/aokp-unofficial-$NOW-tristan202.zip"
      adb push $OUT/$zip /sdcard/aokp-unofficial-$NOW-tristan202.zip
      Finish
    done
  else
    echo ""
    echo "Are you completely sure you remembered to plug in both ends of the cable?"
    read -p "Press [Enter] to try again..."
    Start_Push
  fi
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Reboot_Recovery ()
{
  clear
  echo ""
  echo "${bldblu}Rebooting to recovery. Happy flashing.${txtrst}"
  adb reboot recovery
  echo ""
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Ask_Clobber ()
{
  while true
  do
    clear
    echo ""
    echo "${bldred}Are you sure you want to do this? It is rarely needed...${txtrst}"
    echo ""
    echo -n "Press [${bldred}Y${txtrst}] to continue, or [${bldred}N${txtrst}] to return to main menu."
    read -n1 char
    case "$char" in
      [Nn]) Main ;;
      [Yy]) Start_Clobber ;;
      *) Ask_Clobber ;;
    esac
  done
}

Logcat_Menu ()
{
  NOW=$(date +%b-%d-%Y-%H.%M)
  clear
  while true
  do
    clear
    line='----------------------------------------'
    echo "${bldblu}$line${bldrst}"
    echo "Logcat menu"
    echo ""
    echo "To stop the logcat, press ctrl+z"
    echo "The name of the logfile will be"
    echo "~/logcat-<time-date>.log"
    echo ""
    echo "Select from the following functions"
    echo ""
    echo "  1    Logcat to file"
    echo "  2    Live logcat"
    echo "  3    Return to main menu"
    echo "${bldblu}$line${bldrst}"
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [1]) clear && adb logcat >> ~/logcat-$NOW.log;;
      [2]) clear && adb logcat -C;;
      [3]) Main;;
    esac
  done
  exit 0
}

Reboot_Menu ()
{
  clear
  while true
  do
    clear
    echo "${bldblu}$line${txtrst}"
    echo "Reboot menu"
    echo ""
    echo "Select from the following functions"
    echo ""
    echo "  ${bldblu}1${txtrst}    Reboot"
    echo "  ${bldblu}2${txtrst}    Reboot to recovery"
    echo "  ${bldblu}3${txtrst}    Reboot to bootloader"
    echo "  ${bldblu}4${txtrst}    Return to main menu"
    echo "${bldblu}$line${txtrst}"
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [1]) adb reboot && Main;;
      [2]) Reboot_Recovery;;
      [3]) Reboot_Bootloader;;
      [4]) Main;;
    esac
  done
  exit 0
}

Main ()
{
  clear
  while true
  do
    clear
    line='----------------------------------------'
    echo "${bldblu}$line${txtrst}"
    echo "AOKP maintenance and build script"
    echo ""
    echo "Building ${bldblu}kitkat${txtrst} for ${bldblu}$DEVICE${txtrst}"
    echo ""
    echo "Select from the following functions"
    echo ""
    if [ ! -f $AOKP/.repo/manifest.xml ]; then
      echo "  ${bldgrn}S${txtrst}    Set up AOKP kitkat repo"
    fi
    echo "  ${bldblu}1${txtrst}    Sync AOKP kitkat repo"
    echo "  ${bldblu}2${txtrst}    Build AOKP kitkat"
    echo "  ${bldblu}3${txtrst}    Push finished build to device"
    echo "  ${bldblu}4${txtrst}    Reboot menu"
    echo "  ${bldblu}5${txtrst}    Pick cherries"
    echo "  ${bldblu}6${txtrst}    View the AOKP Gerrit"
    echo "  ${bldblu}L${txtrst}    Logcat"
    echo "  ${bldred}C${txtrst}    Clean build directory"
    echo "  ${bldblu}X${txtrst}    Exit"
    echo "${bldblu}$line${txtrst}"
    tput civis
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [Ss]) Init_Repo;;
      [1]) Start_Sync;;
      [2]) Start_Build;;
      [3]) Start_Push;;
      [4]) Reboot_Menu;;
      [5]) Pick_Cherries;;
      [6]) xdg-open http://gerrit.sudoservers.com/#/q/status:merged+branch:jb,n,z;;
      [Cc]) Ask_Clobber;;
      [Mm]) Merge_repos;;
      [Ll]) Logcat_Menu;;
      [Xx]) clear
        adb kill-server
        echo "Live long and prosper... tristan202"
        echo ""
        tput cnorm
        numlockx off
      break ;;
    esac
  done
  exit 0
}

Main
