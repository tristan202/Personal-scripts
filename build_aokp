#!/bin/bash
# Menu to maintain and build AOKP.
# Written by tristan202. Feel free to use, modify and distribute the script.
# Just remember to give proper credit
#
# tristan202 [ad] gmail.com

me=`basename $0`

# Colorize and add text parameters
txtbld=$(tput bold)             # Bold
bldred=${txtbld}$(tput setaf 1) #  red
bldgrn=${txtbld}$(tput setaf 2) #  green
bldblu=${txtbld}$(tput setaf 4) #  blue
txtrst=$(tput sgr0)             # Reset

VERSION=$2
DEVICE=$1
OUT=$AOKP/out/target/product/$DEVICE
TRISTAN202=$HOME/android/tristan202

if [ "$#" == "0" ]; then
    echo ""
    echo "Usage: $me {Model name, i.e. yuga|maguro} {Android version, i.e. jb-mr1|jb-mr2}"
    exit 1
fi

if [ $VERSION == "jb-mr1" ]; then
    AOKP=$HOME/android/aokp/jb-mr1
elif [ $VERSION == "jb-mr2" ]; then
    AOKP=$HOME/android/aokp/jb-mr2
fi


guake -r AOKP
numlockx on

Output() {
  echo "$(date -d "1970-01-01 UTC $2 seconds") - $1 $OPERATION""ing $3"
}

Duration() {
  local S=$(echo $FINISH_TIME $BEGIN_TIME | awk '{print$1-$2}')
  ((h=S/3600))
  ((m=S%3600/60))
  ((s=S%60))
  printf "${bldgrn}$OPERATION""ing took: %dh:%dm:%ds\n${txtrst}" $h $m $s
}

Begin() {
  BEGIN_TIME=$(date +%s)
  Output Begin $BEGIN_TIME "$1"
}

Finish() {
  FINISH_TIME=$(date +%s)
  Output Finished $FINISH_TIME "$1"
  Duration
}

Init_Repo ()
{
  clear
  echo "${bldblu}Installing required packages${txtrst}"
  sudo add-apt-repository ppa:webupd8team/java
  sudo apt-get update
  sudo apt-get install git gnupg flex bison gperf build-essential zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 pngcrush schedtool oracle-java6-installer
  sudo update-java-alternatives -s java-6-oracle
  sudo apt-get install oracle-java6-set-default
  sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so
  if [ ! -d $AOKP ]; then
    echo ""
    echo "${bldblu}Setting up AOKP repo...${txtrst}"
    mkdir $AOKP
  fi
  if [ ! -d ~/bin ]; then
    mkdir ~/bin
    PATH=~/bin:$PATH
    curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
  fi
  if [ ! -f ~/bin/repo ]; then
    curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
    chmod a+x ~/bin/repo
  fi
  cd $AOKP && repo init -u git://github.com/AOKP/platform_manifest.git -b jb-mr1
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Start_Sync ()
{
  clear
  if [ -d $AOKP ]; then
    echo ""
    OPERATION="Sync"
    echo "${bldblu}Syncing repo...${txtrst}"
    Begin
    echo ""
    cd $AOKP && repo sync
    echo ""
    Finish
  else
    echo ""
    echo "${bldred}Directory does not exist. Check your 'AOKP' variable in line 5.${txtrst}"
    echo ""
    exit 0
  fi
  if [ ! -f $AOKP/.repo/local_manifests/kernel_manifest.xml ]; then
    echo "${bldblu}Fetching kernel manifest${txtrst}"
    $AOKP/platform_manifest/manual_add_kernel_manifest.sh
  fi
  Sync_End
}

Linaro_Patch ()
{
  #Windows X Linaro patch for Xperia Z

  clear
  OPERATION="Sync"
  echo "${bldblu}Applying Linaro patches and installing toolchain...${txtrst}"
  Begin

  #Replace Google's Toolchain with Linaro's
  cp $TRISTAN202/android-toolchain-eabi-4.8-2013.06-x86.tar.bz2 $AOKP/prebuilts/gcc/linux-x86/arm
  cd $AOKP/prebuilts/gcc/linux-x86/arm
  tar -vxf android-toolchain-eabi-4.8-2013.06-x86.tar.bz2
  rm android-toolchain-eabi-4.8-2013.06-x86.tar.bz2
  mv arm-eabi-4.6 arm-eabi-4.6-google
  mv android-toolchain-eabi arm-eabi-4.6

  #Linaro -O3 optimizations for ROM building
  cd $AOKP/build
  git fetch https://github.com/tristan202/build.git && git cherry-pick 9f3ed433fb31b176dd826554eb57cba7fa952706

  #Linaro cortex string handling routines optimizations
  cd $AOKP/bionic/
  git fetch https://github.com/CarbonDev/android_bionic.git && git cherry-pick a1c824da0d34fbcc71fe8dd95ff618f4bba3d753
  git fetch https://github.com/CarbonDev/android_bionic.git && git cherry-pick a046eb1144eb947f69ad65bcc1a97498d8075741
  git fetch https://github.com/CarbonDev/android_bionic.git && git cherry-pick b66fa68efbf907b8f9e6fcafa31e877cc3e1c565

  #TWRP Recovery Linaro fix
  cd $AOKP/bootable/recovery/
  git fetch https://github.com/WindowsX/Team-Win-Recovery-Project.git && git cherry-pick fc866246fe05d743ac5917ee44dbdffe1f620714
  git fetch https://github.com/WindowsX/Team-Win-Recovery-Project.git && git cherry-pick 4e0cc5ba0b883413834a81d32d9501a802022053

  cd $AOKP/external/clang
  git fetch https://github.com/WindowsX/android_external_clang.git && git cherry-pick 81d67da93bd3afa9ce7f5064562ddb0c91ba0a0c

  cd $AOKP/dalvik/
  git fetch https://github.com/WindowsX/android_dalvik.git && git cherry-pick 1c5822ece7f43f13e38ca7d58bc0d5b7f9c79f0f

  cd $AOKP/frameworks/compile/mclinker
  git fetch https://github.com/WindowsX/android_frameworks_compile_mclinker.git && git cherry-pick 1b1004f75cd7493e28f86690ff647cb36b130d64

  cd $AOKP/external/mesa3d
  git fetch https://github.com/WindowsX/android_external_mesa3d.git && git cherry-pick 08ea469ce99454bbf177b4257a74af392fe23ba6

  cd $AOKP/external/linux-tools-perf
  git fetch https://github.com/WindowsX/android_external_linux-tools-perf.git && git cherry-pick 0eb6e3237292092d4fcc05ecd5bd16425110fa3e

  cd $AOKP/hardware/qcom/media-caf
  git fetch https://github.com/WindowsX/android_hardware_qcom_media-caf.git && git cherry-pick 4d64d4a65f4c04bce4ef3e373681337b967d4fb9

  #Trailblazerz Linaro patches

  cd $AOKP/external/e2fsprogs/
  git fetch https://github.com/trailblazerz/android_external_e2fsprogs.git && git cherry-pick 0e540a3cf8c4dd22205ef39a6f9d6edfa0d1183a

  cd $AOKP/external/stlport/
  git fetch https://github.com/trailblazerz/android_external_stlport.git && git cherry-pick 05c206e22eddf9d09b3c497721a94aa23b922811

  cd $AOKP/external/openssl/
  git fetch https://github.com/trailblazerz/android_external_openssl.git && git cherry-pick b43b3c2935e8f27b74c53be2f67fe49f3a515228

  cd $AOKP/frameworks/base/
  git fetch https://github.com/trailblazerz/android_frameworks_base.git && git cherry-pick 3c5ec8d73f8c8dd2b2b84d999c8ad4911566c079

  cd $AOKP/external/skia/
  git fetch https://github.com/trailblazerz/android_external_skia.git && git cherry-pick d496d1bb506b925513d8f5d6e4d8a6c0a67cf7d8

  cd $AOKP/frameworks/av/
  git fetch https://github.com/trailblazerz/android_frameworks_av.git && git cherry-pick 634477166074d503cc8df571315b3b5c4bf4a08d

  cd $AOKP/frameworks/ex/
  git fetch https://github.com/trailblazerz/android_frameworks_ex.git && git cherry-pick aa5da9c8956f09072bb9e783dee2a67798663bb6

  cd $AOKP/frameworks/wilhelm/
  git fetch https://github.com/trailblazerz/android_frameworks_wilhelm.git && git cherry-pick 07251f657bb21080ab96093dc5275b37589bbf37
  git fetch https://github.com/trailblazerz/android_frameworks_wilhelm.git && git cherry-pick 48cc6405503668dc38b4713a98e08d1174b2340c

  cd $AOKP/frameworks/rs/
  git fetch https://github.com/trailblazerz/android_frameworks_rs.git && git cherry-pick f276ba5f5435d6406ef07030e4b1cf613699c62e

  cd $AOKP/external/dnsmasq/
  git fetch https://github.com/trailblazerz/android_external_dnsmasq.git && git cherry-pick 446fceadb803f8c28de809907d55dfab82e9827f

  cd $AOKP/external/openssh/
  git fetch https://github.com/trailblazerz/android_external_openssh.git && git cherry-pick d6a26a88f1f4a39d107c6b6e0296545b9852a50d

  cd $AOKP/frameworks/native/
  git fetch https://github.com/trailblazerz/android_frameworks_native.git && git cherry-pick d75d8d1570bebf8f5de01754fa24e51ba3695999

  cd $AOKP/hardware/qcom/display-caf/
  git fetch https://github.com/trailblazerz/android_hardware_qcom_display-caf.git && git cherry-pick 54b089f6a8d4313edca634c51ebdbe178f8b90e3
  git fetch https://github.com/trailblazerz/android_hardware_qcom_display-caf.git && git cherry-pick d0a861554a0f6d13d3ac6a2aa6b81533f9c3b62d
  git fetch https://github.com/trailblazerz/android_hardware_qcom_display-caf.git && git cherry-pick a9df638dda54472bb7f841b051f2d299316f6b51

  cd $AOKP/libcore
  git fetch https://github.com/trailblazerz/android_libcore.git && git cherry-pick 40617f103bf38e61c43edee4c4ecbc2ea4aaedea

  cd $AOKP/external/webkit/
  git fetch https://github.com/trailblazerz/android_external_webkit.git && git cherry-pick bb873522bc0ed7a4aaa3552527872ece198db104

  Finish
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main

}

Merge_repos ()
{
  clear
  echo ""
  OPERATION="Merg"
  echo "${bldblu}Merging repos...${txtrst}"
  Begin
  echo ""
  echo "${bldblu}Merging frameworks_base${txtrst}"
  cd $TRISTAN202/frameworks_base && git pu
  echo ""
  echo "${bldblu}Merging device_sony_yuga${txtrst}"
  cd $TRISTAN202/device_sony_yuga && git pu
  echo ""
  echo "${bldblu}Merging packages_apps_Settings${txtrst}"
  cd $TRISTAN202/packages_apps_Settings && git pu
  echo ""
  echo "${bldblu}Merging vendor_aokp${txtrst}"
  cd $TRISTAN202/vendor_aokp && git pu
  echo ""
  echo "${bldblu}Merging android_build${txtrst}"
  cd $TRISTAN202/build && git pu
  echo ""
  echo "${bldblu}Merging packages_apps_LockClock${txtrst}"
  cd $TRISTAN202/android_packages_apps_LockClock && git cu
  echo ""
  echo "${bldblu}Merging android_external_zlib${txtrst}"
  cd $TRISTAN202/android_external_zlib && git cu
  echo ""
  echo "${bldblu}Merging android_kernel_sony_apq8064${txtrst}"
  cd $TRISTAN202/android_kernel_sony_apq8064 && git cu
  echo ""
  Finish
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Sync_End ()
{
  echo ""
  echo "${bldblu}Got any cherries to pick?${txtrst}"
  echo ""
  echo -n "Press [${bldred}Y${txtrst}] if you do, or [${bldred}N${txtrst}] to return to main menu."
  echo ""
  read -n1 char
  case "$char" in
    [Nn]) Sync_Linaro ;;
    [Yy])  Pick_Cherries ;;
    *)   clear && echo "" && Sync_End ;;
  esac
}

Sync_Linaro ()
{
if [ $VERSION == "jb-mr1" ]; then
  echo ""
  echo "${bldblu}Would you like to apply Linaro build optimizations and toolchain?${txtrst}"
  echo ""
  echo -n "Press [${bldred}Y${txtrst}] if you do, or [${bldred}N${txtrst}] to return to main menu."
  echo ""
  read -n1 char
  case "$char" in
    [Nn]) Main ;;
    [Yy])  Linaro_Patch ;;
    *)   clear && echo "" && Sync_End ;;
  esac
elif [ $VERSION == "jb-mr2" ]; then
Main
fi
}

Start_Build ()
{
  clear
  OPERATION="Build"
  files=$(ls $OUT/*.zip* 2> /dev/null | wc -l)
  if [ "$files" != "0" ]; then
    echo "Previous builds detected in 'out' folder. Delete them now?"
    echo ""
    echo -n "Press [${bldred}Y${txtrst}] to delete them, or [${bldred}N${txtrst}] to start build without deleting them."
    echo ""
    read -n1 char
    case "$char" in
      [Nn]) Build ;;
      [Yy])  rm $OUT/*.zip* ;;
      *) Start_Build ;;
    esac
  fi
  Build
}

Build ()
{
  clear
  echo ""
  echo "${bldblu}Good, starting build...${txtrst}"
  Begin
  cd $AOKP
  rm -rf out/target/product/$DEVICE/system/build.prop
  #export USE_CCACHE=1
  #export CCACHE_DIR=$TRISTAN202/.ccache
  #prebuilts/misc/linux-x86/ccache/ccache -M 20G
  wait
  echo ""
  echo "${bldblu}Setting up environment${txtrst}"
  echo ""
  . build/envsetup.sh
  wait
  echo ""
  echo "${bldblu}Brunching device${txtrst}"
  echo ""
  brunch $DEVICE -j2
  Finish
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Reboot_Bootloader ()
{
  clear
  echo ""
  echo "${bldblu}Rebooting to bootloader. Happy flashing.${txtrst}"
  adb reboot bootloader
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Start_Clobber ()
{
  clear
  echo ""
  echo "${bldblu}Cleaning build directory...${txtrst}"
  OPERATION="Clean"
  Begin
  cd $AOKP
  make clobber
  Finish
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Pick_Cherries ()
{
  clear
  echo ""
  echo "${bldblu}Picking cherries...${txtrst}"
  OPERATION="Cherrypick"
  tput cnorm
  echo ""
  echo "Copy/paste the project folder, i.e. 'frameworks/base'"
  echo -n ">" && read folder
  echo ""
  echo "Now paste the cherry-pick git link, i.e. 'git fetch <someproject> refs/changes/... && git cherry-pick FETCH_HEAD'"
  echo -n ">" && read cherry
  clear
  echo ""
  Begin
  cd $AOKP/$folder
  CHERRY=${cherry%%??????????????????????????????}
  $CHERRY && git cherry-pick FETCH_HEAD
  Finish
  echo ""
  echo "Got any more cherries to pick?"
  echo ""
  echo -n "Press [${bldred}Y${txtrst}] if you do, or [${bldred}N${txtrst}] to return to main menu."
  echo ""
  read -n1 char
  case "$char" in
    [Nn]) Main ;;
    [Yy])  Pick_Cherries ;;
    *)   Pick_Cherries ;;
  esac
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Start_Push ()
{
  NOW=$(date +%b-%d-%Y)
  clear
  echo "If you haven't done so already, connect your phone to usb now."
  read -p "${bldblu}Press [Enter] to continue...${txtrst}"
  echo ""
  if pidof -x adb > /dev/null
  then
    echo "ADB server already running, proceeding."
    sleep 2
  else
    adb start-server
  fi
  DEVICES=$(adb get-state)
  if [ $DEVICES == "device" ]; then
    FILE=$(find $OUT -type f -name "aokp_*_unofficial_*.zip" -printf %f)
    for zip in $FILE
    do
      OPERATION="Push"
      Begin
      echo ""
      echo "Pushing '$zip' to /ext_card/aokp-unofficial-$NOW-tristan202.zip"
      adb push $OUT/$zip /ext_card/aokp-unofficial-$NOW-tristan202.zip
      Finish
    done
  else
    echo ""
    echo "Are you completely sure you remembered to plug in both ends of the cable?"
    read -p "Press [Enter] to try again..."
    Start_Push
  fi
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Reboot_Recovery ()
{
  clear
  echo ""
  echo "${bldblu}Rebooting to recovery. Happy flashing.${txtrst}"
  adb reboot recovery
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Ask_Clobber ()
{
  while true
  do
    clear
    echo ""
    echo "${bldred}Are you sure you want to do this? It is rarely needed...${txtrst}"
    echo ""
    echo -n "Press [${bldred}Y${txtrst}] to continue, or [${bldred}N${txtrst}] to return to main menu."
    read -n1 char
    case "$char" in
      [Nn]) Main ;;
      [Yy]) Start_Clobber ;;
      *) Ask_Clobber ;;
    esac
  done
}

Logcat_Menu ()
{
  NOW=$(date +%b-%d-%Y-%H.%M)
  clear
  while true
  do
    clear
    line='----------------------------------------'
    echo "${bldblu}$line${bldrst}"
    echo "Logcat menu"
    echo ""
    echo "To stop the logcat, press ctrl+z"
    echo "The name of the logfile will be"
    echo "~/logcat-<time-date>.log"
    echo ""
    echo "Select from the following functions"
    echo ""
    echo "  1    Logcat to file"
    echo "  2    Live logcat"
    echo "  3    Return to main menu"
    echo "${bldblu}$line${bldrst}"
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [1]) clear && adb logcat >> ~/logcat-$NOW.log;;
      [2]) clear && adb logcat -C;;
      [3]) Main;;
    esac
  done
  exit 0
}

Reboot_Menu ()
{
  clear
  while true
  do
    clear
    line='----------------------------------------'
    echo "${bldblu}$line${bldrst}"
    echo "Reboot menu"
    echo ""
    echo "Select from the following functions"
    echo ""
    echo "  1    Reboot"
    echo "  2    Reboot to recovery"
    echo "  3    Reboot to bootloader"
    echo "  4    Return to main menu"
    echo "${bldblu}$line${bldrst}"
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [1]) adb reboot && Main;;
      [2]) Reboot_Recovery;;
      [3]) Reboot_Bootloader;;
      [4]) Main;;
    esac
  done
  exit 0
}

Main ()
{
  clear
  while true
  do
    clear
    line='----------------------------------------'
    echo "${bldblu}$line${txtrst}"
    echo "AOKP maintenance and build script"
    echo ""
    echo "Building ${bldblu}$VERSION${txtrst} for ${bldblu}$DEVICE${txtrst}"
    echo ""
    echo "Select from the following functions"
    echo ""
    echo "  ${bldgrn}S${txtrst}    Set up AOKP repo"
    echo "  ${bldblu}1${txtrst}    Sync AOKP repo"
    echo "  ${bldblu}2${txtrst}    Build AOKP"
    echo "  ${bldblu}3${txtrst}    Push finished build to device"
    echo "  ${bldblu}4${txtrst}    Reboot menu"
    echo "  ${bldblu}5${txtrst}    Pick cherries"
    echo "  ${bldblu}6${txtrst}    View the AOKP Gerrit"
    echo "  ${bldblu}L${txtrst}    Logcat"
if [ $VERSION == "jb-mr1" ]; then
    echo "  ${bldblu}M${txtrst}    Merge repos"
fi
    echo "  ${bldred}C${txtrst}    Clean build directory"
    echo "  ${bldblu}X${txtrst}    Exit"
    echo "${bldblu}$line${txtrst}"
    tput civis
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [Ss]) Init_Repo;;
      [1]) Start_Sync;;
      [2]) Start_Build;;
      [3]) Start_Push;;
      [4]) Reboot_Menu;;
      [5]) Pick_Cherries;;
      [6]) xdg-open http://gerrit.sudoservers.com/#/q/status:merged+branch:jb,n,z;;
      [Cc]) Ask_Clobber;;
      [Mm]) Merge_repos;;
      [Ll]) Logcat_Menu;;
      [Xx]) clear
        adb kill-server
        echo "Live long and prosper... tristan202"
        echo ""
        tput cnorm
	numlockx off
      break ;;
    esac
  done
  exit 0
}

Main
