#!/bin/bash
# Menu to maintain and build SLIM Rom.
# Written by tristan202. Feel free to use, modify and distribute the script.
# Just remember to give proper credit
#
# tristan202 [ad] gmail.com

me=`basename $0`

# Colorize and add text parameters
txtbld=$(tput bold)             # Bold
bldred=${txtbld}$(tput setaf 1) #  red
bldgrn=${txtbld}$(tput setaf 2) #  green
bldblu=${txtbld}$(tput setaf 4) #  blue
txtrst=$(tput sgr0)             # Reset
line='----------------------------------------'

# Make sure to add a model name
if [ "$#" == "0" ]; then
  echo ""
  echo "Usage: $me {Model name, i.e. yuga|maguro}"
  exit 1
fi

# A few variables
SLIM=$HOME/android/slimkat
DEVICE=$1
OUT=$SLIM/out/target/product/$DEVICE

# Use Ccache to speedup rebuilds
export USE_CCACHE=1

# Current time
NOWFULL=$(date +%b-%d-%Y-%H.%M)

# Rename the Guake tab, end enable numlock
guake -r "Slimkat 4.4"

if [ -x /usr/bin/numlockx ]; then
  /usr/bin/numlockx on
fi

Output() {
  echo "${bldgrn}$(date -d "1970-01-01 UTC $2 seconds") - $1 $OPERATION""ing $3${txtrst}"
}

Duration() {
  local S=$(echo $FINISH_TIME $BEGIN_TIME | awk '{print$1-$2}')
  ((h=S/3600))
  ((m=S%3600/60))
  ((s=S%60))
  printf "$OPERATION""ing took: %dh:%dm:%ds\n" $h $m $s
}

Begin() {
  BEGIN_TIME=$(date +%s)
  Output Begin $BEGIN_TIME "$1"
}

Finish() {
  FINISH_TIME=$(date +%s)
  Output Finished $FINISH_TIME "$1"
  Duration
}

Init_Repo ()
{
  clear
  if [ ! -d $SLIM ]; then
    echo ""
    echo "${bldblu}Setting up SLIM repo...${txtrst}"
    mkdir $SLIM
  fi
  if [ ! -d ~/bin ]; then
    mkdir ~/bin
    PATH=~/bin:$PATH
    curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
    chmod a+x ~/bin/repo
  fi
  if [ ! -f ~/bin/repo ]; then
    curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
    chmod a+x ~/bin/repo
  fi
  cd $SLIM && repo init -u git://github.com/SlimRoms/platform_manifest.git -b kk4.4
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Start_Sync ()
{
  clear
  if [ -d $SLIM ]; then
    echo ""
    OPERATION="Sync"
    Begin
    echo ""
    echo ""
    echo "${bldblu}Stashing local changes to frameworks_base...${txtrst}"
    cd $SLIM/frameworks/base && git stash
    echo ""
    echo "${bldblu}Syncing repo...${txtrst}"
    cd $SLIM && repo sync
    echo ""
    echo "${bldblu}Cherrypicking I9ebcf22f85957f61caefb14e0efd4cf2978d92cd from http://review.cyanogenmod.org/#/c/54855/${txtrst}"
    cd $SLIM/frameworks/base && git fetch http://review.cyanogenmod.org/CyanogenMod/android_frameworks_base refs/changes/55/54855/3 && git cherry-pick FETCH_HEAD
    echo ""
    Finish
  else
    echo ""
    echo "${bldred}Directory does not exist. Check your 'SLIM' variable in line 26.${txtrst}"
    echo ""
    exit 0
  fi
  Sync_End
}

Sync_End ()
{
  echo ""
  echo "${bldblu}Got any cherries to pick?${txtrst}"
  echo -n "Press [${bldgrn}Y${txtrst}] if you do, or [${bldred}N${txtrst}] to return to main menu."
  echo ""
  read -n1 char
  case "$char" in
    [Nn]) Main ;;
    [Yy])  Pick_Cherries ;;
    *)   clear && echo "" && Sync_End ;;
  esac
}

Start_Build ()
{
  clear
  OPERATION="Build"
  files=$(ls $OUT/*.zip* 2> /dev/null | wc -l)
  if [ "$files" != "0" ]; then
    echo "${bldblu}Previous builds detected in 'out' folder. Delete them now?${txtrst}"
    echo -n "Press [${bldgrn}Y${txtrst}] to delete them, or [${bldred}N${txtrst}] to start build without deleting them."
    echo ""
    read -n1 char
    case "$char" in
      [Nn]) Build ;;
      [Yy])  rm $OUT/*.zip* ;;
      *) Start_Build ;;
    esac
  fi
  Build
}

Build ()
{
  clear
  echo ""
  echo "${bldblu}Good, starting build...${txtrst}"
  Begin
  cd $SLIM
  rm -rf out/target/product/$DEVICE/system/build.prop
  wait
  echo ""
  echo "${bldblu}Setting up environment${txtrst}"
  echo ""
  . build/envsetup.sh
  wait
  echo ""
  echo "${bldblu}Brunching device${txtrst}"
  echo ""
  brunch $DEVICE -j2
  Finish
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Reboot_Bootloader ()
{
  clear
  echo ""
  echo "${bldblu}Rebooting to bootloader. Happy flashing.${txtrst}"
    if pidof -x adb > /dev/null
  then
    echo "ADB server already running, proceeding."
    sleep 2
  else
  adb start-server
  fi
  adb reboot bootloader
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  adb kill-server
  Main
}

Start_Clobber ()
{
  clear
  echo ""
  echo "${bldblu}Cleaning build directory...${txtrst}"
  OPERATION="Clean"
  Begin
  cd $SLIM
  make clobber
  Finish
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Pick_Cherries ()
{
  clear
  echo ""
  echo "${bldblu}Picking cherries...${txtrst}"
  OPERATION="Cherrypick"
  tput cnorm
  echo ""
  echo "${bldblu}Copy/paste the project folder, i.e. 'frameworks/base'${txtrst}"
  echo -n ">" && read folder
  echo ""
  echo "${bldblu}Now paste the cherry-pick git link, i.e. 'git fetch <someproject> refs/changes/... && git cherry-pick FETCH_HEAD'${txtrst}"
  echo -n ">" && read cherry
  clear
  echo ""
  Begin
  cd $SLIM/$folder
  CHERRY=${cherry%%??????????????????????????????}
  $CHERRY && git cherry-pick FETCH_HEAD
  Finish
  echo ""
  echo "${bldblu}Got any more cherries to pick?${txtrst}"
  echo -n "Press [${bldgrn}Y${txtrst}] if you do, or [${bldred}N${txtrst}] to return to main menu."
  echo ""
  read -n1 char
  case "$char" in
    [Nn]) Main ;;
    [Yy])  Pick_Cherries ;;
    *)   Pick_Cherries ;;
  esac
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Start_Push ()
{
  clear
  echo "If you haven't done so already, connect your phone to usb now."
  read -p "${bldblu}Press [Enter] to continue...${txtrst}"
  echo ""
  if pidof -x adb > /dev/null
  then
    echo "ADB server already running, proceeding."
    sleep 2
  else
    adb start-server
  fi
  DEVICES=$(adb get-state)
  if [ $DEVICES == "device" ]; then
    FILE=$(find $OUT -type f -name "Slim-*.zip" -printf %f)
    for zip in $FILE
    do
      echo "${bldblu}$line${txtrst}"
      echo ""
      echo "Push to internal or external?"
      echo ""
      echo "  ${bldblu}1${txtrst}    Internal (/sdcard)"
      echo "  ${bldblu}2${txtrst}    External (/ext_card)"
      echo ""
      echo "${bldblu}$line${txtrst}"
      echo -n "${bldblu}  "
      read -n1 answer
      echo "${txtrst}"
      case "$answer" in
        [1]) Push_Int ;;
        [2]) Push_Ext ;;
           *) Start_Push ;;
      esac
    done
  else
    echo ""
    echo "${bldred}Are you completely sure you remembered to plug in both ends of the cable?${txtrst}"
    read -p "${bldblu}Press [Enter] to try again...${txtrst}"
    Start_Push
  fi
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  Main
}

Push_Int ()
{
  TargetDir=/sdcard
  FILE=$(find $OUT -type f -name "Slim-*.zip" -printf %f)
  for zip in $FILE
  do
    clear
    OPERATION="Push"
    Begin
    SIZE=$( stat -c %s $OUT/$zip )
    file=$( basename $zip )
    echo ""
    echo "Pushing '$zip' to $TargetDir/$zip"
    echo ""
    coproc ADB_PUSH ( set +m
                      adb push $OUT/$zip $TargetDir/$file 2> /dev/null || \
                      echo "Error: failed"
                      set -m
                    )
    until [ "$ADB_PUSH_PID" = "" ];do
        sleep 1
        adb shell stat -t $TargetDir/$file | \
        awk '{printf "\r[ %5.1f%% ] ( %s/%s )",($2/'$SIZE')*100,$2/1024,'$SIZE'/1024}'
    done
    echo ""
    echo ""
    Finish
    echo ""
  done
}

Push_Ext ()
{
  TargetDir=/ext_card
  FILE=$(find $OUT -type f -name "Slim-*.zip" -printf %f)
  for zip in $FILE
  do
    clear
    OPERATION="Push"
    Begin
    SIZE=$( stat -c %s $OUT/$zip )
    file=$( basename $zip )
    echo ""
    echo "Pushing '$zip' to $TargetDir/$zip"
    echo ""
    coproc ADB_PUSH ( set +m
                      adb push $OUT/$zip $TargetDir/$file 2> /dev/null || \
                      echo "Error: failed"
                      set -m
                    )
    until [ "$ADB_PUSH_PID" = "" ];do
        sleep 1
        adb shell stat -t $TargetDir/$file | \
        awk '{printf "\r[ %5.1f%% ] ( %s/%s )",($2/'$SIZE')*100,$2/1024,'$SIZE'/1024}'
    done
    echo ""
    Finish
    echo ""
  done
}

Reboot_Recovery ()
{
  clear
  echo ""
  echo "${bldblu}Rebooting to recovery. Happy flashing.${txtrst}"
    if pidof -x adb > /dev/null
  then
    echo "ADB server already running, proceeding."
    sleep 2
  else
  adb start-server
  fi
  adb reboot recovery
  read -p "${bldblu}Press [Enter] to return to menu...${txtrst}"
  adb kill-server
  Main
}

Ask_Clobber ()
{
  while true
  do
    clear
    echo ""
    echo "${bldblu}Are you sure you want to do this? It is rarely needed...${txtrst}"
    echo ""
    echo -n "Press [${bldred}Y${txtrst}] to continue, or [${bldgrn}N${txtrst}] to return to main menu."
    read -n1 char
    case "$char" in
      [Nn]) Main ;;
      [Yy]) Start_Clobber ;;
      *) Ask_Clobber ;;
    esac
  done
}

Logcat_Menu ()
{
  clear
  while true
  do
    clear
    echo "${bldblu}$line${txtrst}"
    echo "Logcat menu"
    echo ""
    echo "Select from the following functions"
    echo ""
    echo "  ${bldblu}1${txtrst}    Logcat to file"
    echo "  ${bldblu}2${txtrst}    Live logcat"
    echo "  ${bldblu}M${txtrst}    Return to main menu"
    echo "${bldblu}$line${txtrst}"
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [1]) Logcat_File;;
      [2]) Logcat_Live;;
      [Mm]) Main;;
    esac
  done
  exit 0
}

Logcat_Live ()
{
  clear
  while true
  do
    clear
    echo "${bldblu}$line${txtrst}"
    echo "Live Logcat menu"
    echo ""
    echo "To stop the logcat, press ctrl+z"
    echo ""
    echo "Select from the following logcat options"
    echo ""
    echo "  ${bldblu}1${txtrst}    Verbose"
    echo "  ${bldblu}2${txtrst}    Debug"
    echo "  ${bldblu}3${txtrst}    Info"
    echo "  ${bldblu}4${txtrst}    Warn"
    echo "  ${bldblu}5${txtrst}    Error"
    echo "  ${bldblu}6${txtrst}    Fatal"
    echo "  ${bldblu}M${txtrst}    Return to main menu"
    echo "${bldblu}$line${txtrst}"
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [1]) clear && adb logcat -s '*:V';;
      [2]) clear && adb logcat -s '*:D';;
      [3]) clear && adb logcat -s '*:I';;
      [4]) clear && adb logcat -s '*:W';;
      [5]) clear && adb logcat -s '*:E';;
      [6]) clear && adb logcat -s '*:F';;
      [Mm]) Main;;
    esac
  done
  exit 0
}

Logcat_Live ()
{
  clear
  while true
  do
    clear
    echo "${bldblu}$line${txtrst}"
    echo "Logcat to file menu"
    echo ""
    echo "To stop the logcat, press ctrl+z"
    echo "The logfile will be located at"
    echo "~/logcat-<time-date>.log"
    echo ""
    echo "Select from the following logcat options"
    echo ""
    echo "  ${bldblu}1${txtrst}    Verbose"
    echo "  ${bldblu}2${txtrst}    Debug"
    echo "  ${bldblu}3${txtrst}    Info"
    echo "  ${bldblu}4${txtrst}    Warn"
    echo "  ${bldblu}5${txtrst}    Error"
    echo "  ${bldblu}6${txtrst}    Fatal"
    echo "  ${bldblu}M${txtrst}    Return to main menu"
    echo "${bldblu}$line${txtrst}"
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [1]) clear && adb logcat -s '*:V' >> ~/logcat-$NOWFULL.log;;
      [2]) clear && adb logcat -s '*:D' -f ~/logcat-$NOWFULL.log;;
      [3]) clear && adb logcat -s '*:I' -f ~/logcat-$NOWFULL.log;;
      [4]) clear && adb logcat -s '*:W' -f ~/logcat-$NOWFULL.log;;
      [5]) clear && adb logcat -s '*:E' -f ~/logcat-$NOWFULL.log;;
      [6]) clear && adb logcat -s '*:F' -f ~/logcat-$NOWFULL.log;;
      [Mm]) Main;;
    esac
  done
  exit 0
}

Reboot_Menu ()
{
  clear
  while true
  do
    clear
    echo "${bldblu}$line${txtrst}"
    echo "Reboot menu"
    echo ""
    echo "Select from the following functions"
    echo ""
    echo "  ${bldblu}1${txtrst}    Reboot"
    echo "  ${bldblu}2${txtrst}    Reboot to recovery"
    echo "  ${bldblu}3${txtrst}    Reboot to bootloader"
    echo "  ${bldblu}M${txtrst}    Return to main menu"
    echo "${bldblu}$line${txtrst}"
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [1]) adb reboot && Main;;
      [2]) Reboot_Recovery;;
      [3]) Reboot_Bootloader;;
      [Mm]) Main;;
    esac
  done
  exit 0
}

Main ()
{
  VERSION_MAJOR=$(cat $SLIM/vendor/slim/config/common.mk | grep 'PRODUCT_VERSION_MAJOR =' | cut -d " " -f 3)
  VERSION_MINOR=$(cat $SLIM/vendor/slim/config/common.mk | grep 'PRODUCT_VERSION_MINOR =' | cut -d " " -f 3)
  VERSION_MAINTENANCE=$(cat $SLIM/vendor/slim/config/common.mk | grep 'PRODUCT_VERSION_MAINTENANCE =' | cut -d " " -f 3)

  clear
  while true
  do
    clear
    echo "${bldblu}$line${txtrst}"
    echo "SLIM maintenance and build script"
    echo ""
    echo "Building ${bldblu}Slimkat $VERSION_MAJOR $VERSION_MINOR $VERSION_MAINTENANCE${txtrst}"
    echo "for ${bldblu}$DEVICE${txtrst}"
    echo ""
    echo "Select from the following functions"
    echo ""
    if [ ! -f $SLIM/.repo/manifest.xml ]; then
      echo "  ${bldgrn}S${txtrst}    Set up Slimkat 4.4 repo"
    fi
    echo "  ${bldblu}1${txtrst}    Sync Slimkat 4.4 repo"
    echo "  ${bldblu}2${txtrst}    Build Slimkat 4.4"
    echo "  ${bldblu}3${txtrst}    Push finished build to device"
    echo "  ${bldblu}4${txtrst}    Reboot menu"
    echo "  ${bldblu}5${txtrst}    Pick cherries"
    echo "  ${bldblu}L${txtrst}    Logcat"
    echo "  ${bldred}C${txtrst}    Clean build directory"
    echo "  ${bldblu}X${txtrst}    Exit"
    echo "${bldblu}$line${txtrst}"
    tput civis
    echo -n "  "
    read -n1 answer
    case "$answer" in
      [Ss]) Init_Repo;;
      [1]) Start_Sync;;
      [2]) Start_Build;;
      [3]) Start_Push;;
      [4]) Reboot_Menu;;
      [5]) Pick_Cherries;;
      [Cc]) Ask_Clobber;;
      [Ll]) Logcat_Menu;;
      [Xx]) clear
        adb kill-server
        echo "${bldblu}Live long and prosper... tristan202${txtrst}"
        echo ""
        tput cnorm
	if [ -x /usr/bin/numlockx ]; then
	  /usr/bin/numlockx off
	fi
	break ;;
    esac
  done
  exit 0
}

Main
